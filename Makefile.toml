[env]
# enable working with fake workspace
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_WORKSPACE_EMULATION = true
CARGO_MAKE_CRATE_WORKSPACE_MEMBERS = ["crate"]

PORT = "8080"

[config]
# ability to use cargo command name (e.g build, clean)
skip_core_tasks = true 

# ---- GENERAL ----

[tasks.verify]
description = "Format, lint with Clippy and run tests"
workspace = false
dependencies = ["fmt_prettier" ]
run_task = { name = "verify_crate", fork = true }

[tasks.is_verified]
description = "Like `verify`, but fails if the code isn't formatted. Primarily for CI."
workspace = false
dependencies = ["fmt_prettier_check" ]
run_task = { name = "is_verified_crate", fork = true }

# ---- BASIC ----

[tasks.clean]
description = "Remove build output"
workspace = false
script = [
    "rm -rf dist",
    "rm -f src/generated/css_classes.rs"
]

[tasks.serve]
description = "Start server"
workspace = false
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "-h" }
command = "trunk"
args = ["--config", "configs/Trunk.toml", "serve"]
dependencies = ["prepare"]

[tasks.serve_release]
description = "Start real web server"
workspace = false
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
command = "microserver"
args = ["dist/", "--port", "${PORT}"]
dependencies = ["build_release"]

# ---- BUILD ----

[tasks.build_release]
description = "Build with trunk"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "-h" }
workspace = false
command = "trunk"
args = ["--config", "configs/Trunk.toml", "build", "--release"]
dependencies = ["prepare_release"]

[tasks.prepare]
description = "Prepare asset"
command = "npx"
args = ["postcss", "--config", "configs/postcss.config.js", "sass/main.scss", "--output", "sass/compiled.scss"]

[tasks.prepare_release]
description = "Prepare asset for release"
command = "npx"
args = ["postcss", "--config", "configs/postcss.config.js", "sass/main.scss", "--output", "sass/compiled.scss", "--env", "production"]

# ---- LINT ----

[tasks.fmt_prettier]
description = "Format with prettier"
command = "prettier"
args = ["--config", "configs/prettier.config.js", "--ignore-path", "configs/prettierignore", "--write", "."]

[tasks.fmt_prettier_check]
description = "Check format with prettier"
command = "prettier"
args = ["--config", "configs/prettier.config.js", "--ignore-path", "configs/prettierignore", "--check", "."]
